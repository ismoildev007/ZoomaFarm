Vue.component("megatext", {
    template:
        '\x3cdiv v-if\x3d"text" ref\x3d"container" class\x3d"megatext-container" :class\x3d"[colorClass]"\x3e\n                \x3cspan v-bind:style\x3d"megaTestStyles" ref\x3d"fitting"\x3e{{text}}\x3c/span\x3e\n            \x3c/div\x3e',
    props: {
        colorClass: {
            type: String,
            default: "color-blue",
            validator: function (a) {
                return -1 !== ["color-blue", "color-white", "granite-gray-40"].indexOf(a);
            },
        },
        text: String,
    },
    data: function () {
        return { fontSize: 14, stopProcess: !1 };
    },
    computed: {
        megaTestStyles: function () {
            return { fontSize: this.fontSize + "px", lineHeight: this.fontSize + 0.2 * this.fontSize + "px" };
        },
    },
    mounted: function () {
        var a = this,
            b = this.isIEOrEdge() ? 400 : 300;
        setTimeout(function () {
            a.$nextTick(a.checkAndIncrease);
        }, b);
        window.addEventListener("resize", function () {
            a.stopProcess = !1;
            a.checkAndIncrease();
        });
    },
    updated: function () {
        this.$nextTick(this.checkAndIncrease);
    },
    destroyed: function () {
        window.removeEventListener("resize", this.checkAndIncrease);
    },
    mixins: [utilitiesMixin],
    methods: {
        getOffsets: function () {
            return { textOffsetWidth: this.$refs.fitting.offsetWidth, containerWidth: this.$refs.container.offsetWidth };
        },
        checkAndIncrease: function () {
            var a = this.getOffsets();
            a.textOffsetWidth < a.containerWidth && !this.stopProcess ? (this.fontSize += 1) : ((this.stopProcess = !0), this.checkAndDecrease(), this.$emit("fontsizechange", this.fontSize));
        },
        checkAndDecrease: function () {
            var a = this.getOffsets();
            a.textOffsetWidth > a.containerWidth && --this.fontSize;
        },
    },
});
