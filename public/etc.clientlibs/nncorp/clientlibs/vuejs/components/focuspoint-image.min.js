Vue.component("focuspoint-image", {
    data: function () {
        return { xpos: 50, ypos: 50, isDynamicMedia: !1, mobileSource: "", tabletPortraitSource: "", tabletLandscapeSource: "", desktopSource: "", currentResolution: "desktop" };
    },
    props: { imageUrl: String, hasProhibitedExtension: Boolean, coordinates: String, dynamicMediaInfo: Object, renditionsImageInfo: Object },
    mixins: [utilitiesMixin],
    methods: {
        backgroundStyles: function (a) {
            "" !== this.coordinates && ((this.xpos = Math.abs(50 * (Number(this.coordinates.split(":")[0]) + 1))), (this.ypos = Math.abs(50 * (Number(this.coordinates.split(":")[1]) - 1))));
            a = this.getImageSource(a).replace(/\s/g, "%20");
            return { backgroundImage: "url(".concat(a, ")"), backgroundPosition: "".concat(this.xpos, "% ").concat(this.ypos, "%"), backgroundSize: "cover" };
        },
        getImageSource: function (a) {
            if (!this.renditionsImageInfo && !this.dynamicMediaInfo) return this.imageUrl;
            switch (a) {
                case "desktop":
                    return this.desktopSource;
                case "tabletPortrait":
                    return this.tabletPortraitSource;
                case "tabletLandscape":
                    return this.tabletLandscapeSource;
                case "mobile":
                    return this.mobileSource;
                default:
                    return this.imageUrl;
            }
        },
        init: function () {
            if (this.renditionsImageInfo || this.dynamicMediaInfo) {
                var a =
                    "\x26fit\x3dconstrain" +
                    (this.dynamicMediaInfo.jpegQuality ? "\x26qlt\x3d".concat(this.dynamicMediaInfo.jpegQuality) : "") +
                    (this.dynamicMediaInfo.jpegQuality && this.dynamicMediaInfo.urlModifiers ? "\x26".concat(this.dynamicMediaInfo.urlModifiers) : "");
                (this.isDynamicMedia =
                    !this.dynamicMediaInfo.disableDynamicMedia &&
                    this.dynamicMediaInfo.dynamicMediaImagePath &&
                    "false" !== this.dynamicMediaInfo.dynamicMediaImagePath &&
                    "true" !== this.hasProhibitedExtension)
                    ? ((this.mobileSource = encodeURI(this.dynamicMediaInfo.dynamicMediaImagePath + "?wid\x3d" + this.dynamicMediaInfo.mobileDynamicMediaWidth + a)),
                      (this.tabletPortraitSource = encodeURI(this.dynamicMediaInfo.dynamicMediaImagePath + "?wid\x3d" + this.dynamicMediaInfo.tabletPortraitDynamicMediaWidth + a)),
                      (this.tabletLandscapeSource = encodeURI(this.dynamicMediaInfo.dynamicMediaImagePath + "?wid\x3d" + this.dynamicMediaInfo.tabletLandscapeDynamicMediaWidth + a)),
                      (this.desktopSource = encodeURI(this.dynamicMediaInfo.dynamicMediaImagePath + "?wid\x3d" + this.dynamicMediaInfo.desktopDynamicMediaWidth + a)))
                    : (this.renditionsImageInfo.typeOfRendition && "automatic" !== this.renditionsImageInfo.typeOfRendition) || "true" === this.hasProhibitedExtension
                    ? (this.desktopSource = this.tabletLandscapeSource = this.tabletPortraitSource = this.mobileSource = a = encodeURI(this.imageUrl))
                    : ((this.mobileSource = encodeURI(this.imageUrl + this.renditionsImageInfo.mobileRenditionSuffix)),
                      (this.tabletPortraitSource = encodeURI(this.imageUrl + this.renditionsImageInfo.tabletPortraitRenditionSuffix)),
                      (this.tabletLandscapeSource = encodeURI(this.imageUrl + this.renditionsImageInfo.tabletLandscapeRenditionSuffix)),
                      (this.desktopSource = encodeURI(this.imageUrl + this.renditionsImageInfo.desktopRenditionSuffix)));
            }
        },
        handleWindowResize: function () {
            this.currentResolution =
                525 >= window.outerWidth
                    ? "mobile"
                    : 768 >= window.outerWidth && 525 < window.outerWidth
                    ? "tabletPortrait"
                    : 1280 >= window.outerWidth && 768 < window.outerWidth
                    ? "tabletLandscape"
                    : "desktop";
        },
    },
    mounted: function () {
        this.init();
        window.addEventListener("resize", this.handleWindowResize);
        this.handleWindowResize();
    },
    template:
        '\n        \x3cspan\x3e\n            \x3cdiv v-if\x3d"currentResolution \x3d\x3d\x3d \'desktop\'" class\x3d"focuspoint-image desktop focuspoint-container" v-bind:style\x3d"backgroundStyles(\'desktop\')"\x3e\x3c/div\x3e\n            \x3cdiv v-if\x3d"currentResolution \x3d\x3d\x3d \'tabletPortrait\'" class\x3d"focuspoint-image desktop focuspoint-container" v-bind:style\x3d"backgroundStyles(\'tabletPortrait\')"\x3e\x3c/div\x3e\n            \x3cdiv v-if\x3d"currentResolution \x3d\x3d\x3d \'tabletLandscape\'" class\x3d"focuspoint-image desktop focuspoint-container" v-bind:style\x3d"backgroundStyles(\'tabletLandscape\')"\x3e\x3c/div\x3e\n            \x3cdiv v-if\x3d"currentResolution \x3d\x3d\x3d \'mobile\'" class\x3d"focuspoint-image desktop focuspoint-container" v-bind:style\x3d"backgroundStyles(\'mobile\')"\x3e\x3c/div\x3e\n        \x3c/span\x3e\n   ',
});
